/* Style the header with a grey background and some padding */
.header {
    overflow: hidden;
    background-color: #f1f1f1;
    padding: 20px 10px;
    border-bottom: 2px solid red;
  }
  
  /* Style the header links */
  .header a {
    float: left;
    color: black;
    text-align: center;
    padding: 12px;
    text-decoration: none;
    font-size: 18px;
    line-height: 25px;
    border-radius: 4px;
  }
  
  /* Style the logo link (notice that we set the same value of line-height and font-size to prevent the header to increase when the font gets bigger */
  .header a.logo {
    font-size: 25px;
    font-weight: bold;
  }
  
  /* Change the background color on mouse-over */
  .header a:hover {
    background-color: #ddd;
    color: black;
  }
  
  /* Style the active/current link*/
  .header a.active {
    background-color: red;
    color: white;
  }
  strong{
    color:red;
  }
  /* Float the link section to the right */
  .header-right {
    float: right;
  }
  
  /* Add media queries for responsiveness - when the screen is 500px wide or less, stack the links on top of each other */
  @media screen and (max-width: 500px) {
    .header a {
      float: none;
      display: block;
      text-align: left;
    }
    .header-right {
      float: none;
    }
  }
@mixin sp-layout {
@media screen and (max-width: 750px) {
  @content;
}
}

body {
display: flex;
justify-content: center;
align-items: center;
min-height: 100vh;
 background: radial-gradient(ellipse at bottom, #f10e0e 0%, #ee0505 100%);
overflow: hidden;
}

@function random_range($min, $max) {
$rand: random();
$random_range: $min + floor($rand * (($max - $min) + 1));
@return $random_range;
}

.stars {
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 120%;
transform: rotate(-45deg);
}

.star {
$star-count: 30;
--star-color: var(red);
--star-tail-length: 6em;
--star-tail-height: 2px;
--star-width: calc(var(--star-tail-length) / 6);
--fall-duration: 9s;
--tail-fade-duration: var(--fall-duration);

position: absolute;
top: var(--top-offset);
left: 0;
width: var(--star-tail-length);
height: var(--star-tail-height);
color: var(red);
background: linear-gradient(45deg, red, transparent);
border-radius: 50%;
filter: drop-shadow(0 0 6px red);
transform: translate3d(104em, 0, 0);
animation: fall var(--fall-duration) var(--fall-delay) linear infinite, tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;

@include sp-layout {
  // For mobile performance, tail-fade animation will be removed QAQ
  animation: fall var(--fall-duration) var(--fall-delay) linear infinite;
}

@for $i from 1 through $star-count {
  &:nth-child(#{$i}) {
    --star-tail-length: #{random_range(500em, 750em) / 100};
    --top-offset: #{random_range(0vh, 10000vh) / 100};
    --fall-duration: #{random_range(6000, 12000s) / 1000};
    --fall-delay: #{random_range(0, 10000s) / 1000};
  }
}

&::before, &::after {
  position: absolute;
  content: '';
  top: 0;
  left: calc(var(--star-width) / -2);
  width: var(--star-width);
  height: 100%;
  background: linear-gradient(45deg, transparent, red, transparent);
  border-radius: inherit;
  animation: blink 2s linear infinite;
}

&::before {
  transform: rotate(45deg);
}

&::after {
  transform: rotate(-45deg);
}
}

@keyframes fall {
to {
  transform: translate3d(-30em, 0, 0);
}
}

@keyframes tail-fade {
0%, 50% {
  width: var(--star-tail-length);
  opacity: 1;
}

70%, 80% {
  width: 0;
  opacity: 0.4;
}

100% {
  width: 0;
  opacity: 0;
}
}

@keyframes blink {
50% {
  opacity: 0.6;
}
}